{"ast":null,"code":"import _objectSpread from \"/home/wild/Documents/WildCircus/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/wild/Documents/WildCircus/frontend/src/Components/Contact/UploadFile.jsx\";\nimport React, { Component } from \"react\";\nimport \"./Upload.css\";\nimport Dropzone from \"./Dropzone\";\nimport Progress from \"./Progress\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Upload Files\"), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, file.name));\n    }))), React.createElement(\"div\", {\n      className: \"Actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: \"baseline-check_circle_outline-24px.svg\",\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return React.createElement(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Clear\");\n    } else {\n      return React.createElement(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Upload\");\n    }\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          const copy = _objectSpread({}, this.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n        }\n      });\n      req.upload.addEventListener(\"load\", event => {\n        const copy = _objectSpread({}, this.state.uploadProgress);\n\n        copy[file.name] = {\n          state: \"done\",\n          percentage: 100\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        resolve(req.response);\n      });\n      req.upload.addEventListener(\"error\", event => {\n        const copy = _objectSpread({}, this.state.uploadProgress);\n\n        copy[file.name] = {\n          state: \"error\",\n          percentage: 0\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        reject(req.response);\n      });\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/wild/Documents/WildCircus/frontend/src/Components/Contact/UploadFile.jsx"],"names":["React","Component","Dropzone","Progress","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","render","map","file","name","renderProgress","percentage","opacity","length","promises","forEach","push","Promise","all","e","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","loaded","total","response","formData","FormData","append","open","send"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Upload.css\";\nimport Dropzone from \"./Dropzone\";\nimport Progress from \"./Progress\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n  render() {\n    return (\n      <div className=\"Upload\">\n        <span className=\"Title\">Upload Files</span>\n        <div className=\"Content\">\n          <div>\n            <Dropzone\n              onFilesAdded={this.onFilesAdded}\n              disabled={this.state.uploading || this.state.successfullUploaded}\n            />\n          </div>\n          <div className=\"Files\">\n            {/* // Add this: */}\n            {this.state.files.map(file => {\n              return (\n                <div key={file.name} className=\"Row\">\n                  <span className=\"Filename\">{file.name}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"Actions\" />\n      </div>\n    );\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return (\n        <div className=\"ProgressWrapper\">\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\n          <img\n            className=\"CheckIcon\"\n            alt=\"done\"\n            src=\"baseline-check_circle_outline-24px.svg\"\n            style={{\n              opacity:\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n            }}\n          />\n        </div>\n      );\n    }\n  }\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return (\n        <button\n          onClick={() =>\n            this.setState({ files: [], successfullUploaded: false })\n          }\n        >\n          Clear\n        </button>\n      );\n    } else {\n      return (\n        <button\n          disabled={this.state.files.length < 0 || this.state.uploading}\n          onClick={this.uploadFiles}\n        >\n          Upload\n        </button>\n      );\n    }\n  }\n  async uploadFiles() {\n    this.setState({ uploadProgress: {}, uploading: true });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n    try {\n      await Promise.all(promises);\n\n      this.setState({ successfullUploaded: true, uploading: false });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({ successfullUploaded: true, uploading: false });\n    }\n  }\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          const copy = { ...this.state.uploadProgress };\n          copy[file.name] = {\n            state: \"pending\",\n            percentage: (event.loaded / event.total) * 100\n          };\n          this.setState({ uploadProgress: copy });\n        }\n      });\n\n      req.upload.addEventListener(\"load\", event => {\n        const copy = { ...this.state.uploadProgress };\n        copy[file.name] = { state: \"done\", percentage: 100 };\n        this.setState({ uploadProgress: copy });\n        resolve(req.response);\n      });\n\n      req.upload.addEventListener(\"error\", event => {\n        const copy = { ...this.state.uploadProgress };\n        copy[file.name] = { state: \"error\", percentage: 0 };\n        this.setState({ uploadProgress: copy });\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}